{"version":3,"file":"static/js/295.6db78966.chunk.js","mappings":"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","sources":["pages/Home/scrollSpy.js","pages/Home/Topbar.js"],"sourcesContent":["import React, { Component } from 'react';\n\nclass ScrollspyNav extends Component {\n    constructor(props) {\n        super(props);\n\n        this.props = props;\n        this.scrollTargetIds = this.props.scrollTargetIds;\n        this.activeNavClass = this.props.activeNavClass;\n        this.scrollDuration = Number(this.props.scrollDuration) || 1000;\n        this.headerBackground = this.props.headerBackground === \"true\" ? true : false;\n\n        if (this.props.router && this.props.router === \"HashRouter\") {\n            this.homeDefaultLink = \"#/\";\n            this.hashIdentifier = \"#/#\";\n        } else {\n            this.homeDefaultLink = \"/\";\n            this.hashIdentifier = \"#\";\n        }\n        this.scrollSection.bind(this);\n    }\n\n    easeInOutQuad(current_time, start, change, duration) {\n        current_time /= duration / 2;\n        if (current_time < 1) return change / 2 * current_time * current_time + start;\n        current_time--;\n        return -change / 2 * (current_time * (current_time - 2) - 1) + start;\n    };\n\n    scrollTo(start, to, duration) {\n        let change = to - start,\n            currentTime = 0,\n            increment = 10;\n\n        let animateScroll = () => {\n            currentTime += increment;\n            let val = this.easeInOutQuad(currentTime, start, change, duration);\n            window.scrollTo(0, val);\n            if (currentTime < duration) {\n                setTimeout(animateScroll, increment);\n            }\n        };\n\n        animateScroll();\n    }\n\n    getNavLinkElement(sectionID) {\n        return document.querySelector(`a[href='${this.hashIdentifier}${sectionID}']`);\n    }\n\n    getNavToSectionID(navHref) {\n        return navHref.includes(this.hashIdentifier) ? navHref.replace(this.hashIdentifier, \"\") : \"\";\n    }\n\n    componentDidMount() {\n        if (document.querySelector(`a[href='${this.homeDefaultLink}']`)) {\n            document.querySelector(`a[href='${this.homeDefaultLink}']`).addEventListener(\"click\", (event) => {\n                event.preventDefault();\n                this.scrollTo(window.pageYOffset, 0, this.scrollDuration);\n                window.location.hash = \"\";\n            });\n        }\n\n        document.querySelector(\"div[data-nav='list']\").querySelectorAll(\"a\").forEach((navLink) => {\n            navLink.addEventListener(\"click\", (event) => {\n                event.preventDefault();\n                let sectionID = this.getNavToSectionID(navLink.getAttribute(\"href\"));\n\n                if (sectionID) {\n                    let scrollTargetPosition = document.getElementById(sectionID).offsetTop - (this.headerBackground ? document.querySelector(\"div[data-nav='list']\").scrollHeight : 0);\n                    this.scrollTo(window.pageYOffset, scrollTargetPosition, this.scrollDuration);\n                } else {\n                    this.scrollTo(window.pageYOffset, 0, this.scrollDuration);\n                }\n            });\n        })\n\n        window.addEventListener(\"scroll\", this.scrollSection, true );\n    }\n\n    componentWillUnmount(){\n        window.removeEventListener(\"scroll\", this.scrollSection, true );\n    }\n    \n    scrollSection = () => {\n            let scrollSectionOffsetTop;\n            this.scrollTargetIds.forEach((sectionID, index) => {\n\n                if (window.pageYOffset >= scrollSectionOffsetTop && window.pageYOffset < scrollSectionOffsetTop + document.getElementById(sectionID).scrollHeight) {\n                    this.getNavLinkElement(sectionID).classList.add(this.activeNavClass);\n                    this.getNavLinkElement(sectionID).parentNode.classList.add(this.activeNavClass);\n                    this.clearOtherNavLinkActiveStyle(sectionID)\n                } else {\n                    this.getNavLinkElement(sectionID).classList.remove(this.activeNavClass);\n                    this.getNavLinkElement(sectionID).parentNode.classList.remove(this.activeNavClass);\n                }\n\n                if (window.innerHeight + window.pageYOffset >= document.body.scrollHeight && index === this.scrollTargetIds.length - 1) {\n                    this.getNavLinkElement(sectionID).classList.add(this.activeNavClass);\n                    this.getNavLinkElement(sectionID).parentNode.classList.add(this.activeNavClass);\n                    this.clearOtherNavLinkActiveStyle(sectionID);\n                }\n            });\n    }\n    clearOtherNavLinkActiveStyle(excludeSectionID) {\n        this.scrollTargetIds.forEach((sectionID, index) => {\n            if (sectionID !== excludeSectionID) {\n                this.getNavLinkElement(sectionID).classList.remove(this.activeNavClass);\n                this.getNavLinkElement(sectionID).parentNode.classList.remove(this.activeNavClass);\n            }\n        });\n    }\n\n    render() {\n        return (\n            <div data-nav=\"list\" className={this.props.className}>\n                {this.props.children}\n            </div>\n        );\n    }\n}\n\nexport default ScrollspyNav;","import React, { Component } from \"react\";\nimport { Container } from \"reactstrap\";\nimport { Link } from \"react-router-dom\";\nimport ScrollspyNav from \"./scrollSpy\";\n\nimport Logo from \"../../assets/images/tonana.png\";\n\nclass Topbar extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      navItems: [\n        { id: 1, idnm: \"about\", navheading: \"About\", href: \"https://twitter.com/TONANAbridge\" },\n        { id: 2, idnm: \"roadmap\", navheading: \"Roadmap\", href: \"https://www.notion.so/f4f76f23b29f41fe9d4aee3c745a7202?v=f02e74972f594f358eec4a7cffb2741c\" },\n        { id: 3, idnm: \"team\", navheading: \"Team\", href: \"https://www.linkedin.com/company/tonana/\" },\n      ],\n      isOpen: false,\n    };\n    this.toggleLine = this.toggleLine.bind(this);\n  }\n\n  toggleLine() {\n    this.setState((prevState) => ({ isOpen: !prevState.isOpen }));\n  }\n\n  render() {\n    let targetId = this.state.navItems.map((item) => {\n      return item.idnm;\n    });\n    return (\n      <React.Fragment>\n        <header id=\"topnav\" className=\"defaultscroll sticky\">\n          <Container>\n            <Link className=\"logo\" to=\"/\">\n              <img src={Logo} height=\"24\" alt=\"\" />\n            </Link>\n            <div className=\"buy-button\">\n              <a\n                href=\"https://app.tonana.org\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"btn btn-warning btn-pills\"\n              >\n                Launch App\n              </a>\n            </div>\n            <div className=\"menu-extras\">\n              <div className=\"menu-item\">\n                <Link\n                  to=\"#\"\n                  onClick={this.toggleLine}\n                  className={\n                    this.state.isOpen ? \"navbar-toggle open\" : \"navbar-toggle\"\n                  }\n                >\n                  <div className=\"lines\">\n                    <span></span>\n                    <span></span>\n                    <span></span>\n                  </div>\n                </Link>\n              </div>\n            </div>\n            <ScrollspyNav\n              scrollTargetIds={targetId}\n              scrollDuration=\"800\"\n              headerBackground=\"false\"\n              activeNavClass=\"active\"\n            >\n              <div\n                id=\"navigation\"\n                style={{ display: this.state.isOpen ? \"block\" : \"none\" }}\n              >\n                <ul className=\"navigation-menu\">\n                  {this.state.navItems.map((item, key) => (\n                    <li key={key} className=\"has-submenu\">\n                      <a href={item.href}> {item.navheading}</a>\n                    </li>\n                  ))}\n                </ul>\n              </div>\n            </ScrollspyNav>\n          </Container>\n        </header>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Topbar;\n"],"names":["ScrollspyNav","props","scrollSection","scrollSectionOffsetTop","scrollTargetIds","forEach","sectionID","index","window","pageYOffset","document","getElementById","scrollHeight","getNavLinkElement","classList","add","activeNavClass","parentNode","clearOtherNavLinkActiveStyle","remove","innerHeight","body","length","scrollDuration","Number","headerBackground","router","homeDefaultLink","hashIdentifier","bind","current_time","start","change","duration","to","currentTime","animateScroll","val","easeInOutQuad","scrollTo","setTimeout","querySelector","this","navHref","includes","replace","addEventListener","event","preventDefault","location","hash","querySelectorAll","navLink","getNavToSectionID","getAttribute","scrollTargetPosition","offsetTop","removeEventListener","excludeSectionID","className","children","Component","Topbar","state","navItems","id","idnm","navheading","href","isOpen","toggleLine","setState","prevState","targetId","map","item","src","Logo","height","alt","target","rel","onClick","style","display","key"],"sourceRoot":""}