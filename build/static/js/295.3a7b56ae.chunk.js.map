{"version":3,"file":"static/js/295.3a7b56ae.chunk.js","mappings":"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","sources":["pages/Home/scrollSpy.js","pages/Home/Topbar.js"],"sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass ScrollspyNav extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.props = props;\r\n    this.scrollTargetIds = this.props.scrollTargetIds;\r\n    this.activeNavClass = this.props.activeNavClass;\r\n    this.scrollDuration = Number(this.props.scrollDuration) || 1000;\r\n    this.headerBackground =\r\n      this.props.headerBackground === 'true' ? true : false;\r\n\r\n    if (this.props.router && this.props.router === 'HashRouter') {\r\n      this.homeDefaultLink = '#/';\r\n      this.hashIdentifier = '#/#';\r\n    } else {\r\n      this.homeDefaultLink = '/';\r\n      this.hashIdentifier = '#';\r\n    }\r\n    this.scrollSection.bind(this);\r\n  }\r\n\r\n  easeInOutQuad(current_time, start, change, duration) {\r\n    current_time /= duration / 2;\r\n    if (current_time < 1)\r\n      return (change / 2) * current_time * current_time + start;\r\n    current_time--;\r\n    return (-change / 2) * (current_time * (current_time - 2) - 1) + start;\r\n  }\r\n\r\n  scrollTo(start, to, duration) {\r\n    let change = to - start,\r\n      currentTime = 0,\r\n      increment = 10;\r\n\r\n    let animateScroll = () => {\r\n      currentTime += increment;\r\n      let val = this.easeInOutQuad(currentTime, start, change, duration);\r\n      window.scrollTo(0, val);\r\n      if (currentTime < duration) {\r\n        setTimeout(animateScroll, increment);\r\n      }\r\n    };\r\n\r\n    animateScroll();\r\n  }\r\n\r\n  getNavLinkElement(sectionID) {\r\n    return document.querySelector(\r\n      `a[href='${this.hashIdentifier}${sectionID}']`,\r\n    );\r\n  }\r\n\r\n  getNavToSectionID(navHref) {\r\n    return navHref.includes(this.hashIdentifier)\r\n      ? navHref.replace(this.hashIdentifier, '')\r\n      : '';\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (document.querySelector(`a[href='${this.homeDefaultLink}']`)) {\r\n      document\r\n        .querySelector(`a[href='${this.homeDefaultLink}']`)\r\n        .addEventListener('click', (event) => {\r\n          event.preventDefault();\r\n          this.scrollTo(window.pageYOffset, 0, this.scrollDuration);\r\n          window.location.hash = '';\r\n        });\r\n    }\r\n\r\n    document\r\n      .querySelector(\"div[data-nav='list']\")\r\n      .querySelectorAll('a')\r\n      .forEach((navLink) => {\r\n        navLink.addEventListener('click', (event) => {\r\n          //   event.preventDefault();\r\n          let sectionID = this.getNavToSectionID(navLink.getAttribute('href'));\r\n\r\n          if (sectionID) {\r\n            let scrollTargetPosition =\r\n              document.getElementById(sectionID).offsetTop -\r\n              (this.headerBackground\r\n                ? document.querySelector(\"div[data-nav='list']\").scrollHeight\r\n                : 0);\r\n            this.scrollTo(\r\n              window.pageYOffset,\r\n              scrollTargetPosition,\r\n              this.scrollDuration,\r\n            );\r\n          } else {\r\n            this.scrollTo(window.pageYOffset, 0, this.scrollDuration);\r\n          }\r\n        });\r\n      });\r\n\r\n    window.addEventListener('scroll', this.scrollSection, true);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener('scroll', this.scrollSection, true);\r\n  }\r\n\r\n  scrollSection = () => {\r\n    let scrollSectionOffsetTop;\r\n    this.scrollTargetIds.forEach((sectionID, index) => {\r\n      if (\r\n        window.pageYOffset >= scrollSectionOffsetTop &&\r\n        window.pageYOffset <\r\n          scrollSectionOffsetTop +\r\n            document.getElementById(sectionID).scrollHeight\r\n      ) {\r\n        this.getNavLinkElement(sectionID).classList.add(this.activeNavClass);\r\n        this.getNavLinkElement(sectionID).parentNode.classList.add(\r\n          this.activeNavClass,\r\n        );\r\n        this.clearOtherNavLinkActiveStyle(sectionID);\r\n      } else {\r\n        this.getNavLinkElement(sectionID).classList.remove(this.activeNavClass);\r\n        this.getNavLinkElement(sectionID).parentNode.classList.remove(\r\n          this.activeNavClass,\r\n        );\r\n      }\r\n\r\n      if (\r\n        window.innerHeight + window.pageYOffset >= document.body.scrollHeight &&\r\n        index === this.scrollTargetIds.length - 1\r\n      ) {\r\n        this.getNavLinkElement(sectionID).classList.add(this.activeNavClass);\r\n        this.getNavLinkElement(sectionID).parentNode.classList.add(\r\n          this.activeNavClass,\r\n        );\r\n        this.clearOtherNavLinkActiveStyle(sectionID);\r\n      }\r\n    });\r\n  };\r\n  clearOtherNavLinkActiveStyle(excludeSectionID) {\r\n    this.scrollTargetIds.forEach((sectionID, index) => {\r\n      if (sectionID !== excludeSectionID) {\r\n        this.getNavLinkElement(sectionID).classList.remove(this.activeNavClass);\r\n        this.getNavLinkElement(sectionID).parentNode.classList.remove(\r\n          this.activeNavClass,\r\n        );\r\n      }\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div data-nav=\"list\" className={this.props.className}>\r\n        {this.props.children}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ScrollspyNav;\r\n","import React, { Component } from 'react';\r\nimport { Container } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport ScrollspyNav from './scrollSpy';\r\n\r\nimport Logo from '../../assets/images/tonana.png';\r\n\r\nclass Topbar extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      navItems: [\r\n        {\r\n          id: 1,\r\n          idnm: 'about',\r\n          navheading: 'Docs',\r\n          href: 'https://wiki.tonana.org/',\r\n        },\r\n        {\r\n          id: 2,\r\n          idnm: 'events',\r\n          navheading: 'Events',\r\n          href: 'https://wiki.tonana.org/events/we-organize',\r\n        },\r\n        {\r\n          id: 3,\r\n          idnm: 'team',\r\n          navheading: 'Team',\r\n          href: 'https://wiki.tonana.org/tonana-defi-hub/dao/developers',\r\n        },\r\n        {\r\n          id: 4,\r\n          idnm: 'blog',\r\n          navheading: 'Blog',\r\n          href: 'https://twitter.com/tonana_dao',\r\n        },\r\n      ],\r\n      isOpen: false,\r\n    };\r\n    this.toggleLine = this.toggleLine.bind(this);\r\n  }\r\n\r\n  toggleLine() {\r\n    this.setState((prevState) => ({ isOpen: !prevState.isOpen }));\r\n  }\r\n\r\n  render() {\r\n    let targetId = this.state.navItems.map((item) => {\r\n      return item.idnm;\r\n    });\r\n    return (\r\n      <React.Fragment>\r\n        <header id=\"topnav\" className=\"defaultscroll sticky\">\r\n          <Container>\r\n            <Link className=\"logo\" to=\"/\">\r\n              <img src={Logo} height=\"24\" alt=\"\" />\r\n            </Link>\r\n            <div className=\"buy-button\">\r\n              <a\r\n                href=\"https://app.tonana.org\"\r\n                target=\"_blank\"\r\n                rel=\"noopener noreferrer\"\r\n                className=\"btn btn-warning btn-pills\"\r\n              >\r\n                Launch bridge app\r\n              </a>\r\n            </div>\r\n            <div className=\"menu-extras\">\r\n              <div className=\"menu-item\">\r\n                <Link\r\n                  to=\"#\"\r\n                  onClick={this.toggleLine}\r\n                  className={\r\n                    this.state.isOpen ? 'navbar-toggle open' : 'navbar-toggle'\r\n                  }\r\n                >\r\n                  <div className=\"lines\">\r\n                    <span></span>\r\n                    <span></span>\r\n                    <span></span>\r\n                  </div>\r\n                </Link>\r\n              </div>\r\n            </div>\r\n            <ScrollspyNav\r\n              scrollTargetIds={targetId}\r\n              scrollDuration=\"800\"\r\n              headerBackground=\"false\"\r\n              activeNavClass=\"active\"\r\n            >\r\n              <div\r\n                id=\"navigation\"\r\n                style={{ display: this.state.isOpen ? 'block' : 'none' }}\r\n              >\r\n                <ul className=\"navigation-menu\">\r\n                  {this.state.navItems.map((item, key) => (\r\n                    <li key={key} className=\"has-submenu\">\r\n                      <a href={item.href}> {item.navheading}</a>\r\n                    </li>\r\n                  ))}\r\n                </ul>\r\n              </div>\r\n            </ScrollspyNav>\r\n          </Container>\r\n        </header>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Topbar;\r\n"],"names":["ScrollspyNav","props","scrollSection","scrollSectionOffsetTop","scrollTargetIds","forEach","sectionID","index","window","pageYOffset","document","getElementById","scrollHeight","getNavLinkElement","classList","add","activeNavClass","parentNode","clearOtherNavLinkActiveStyle","remove","innerHeight","body","length","scrollDuration","Number","headerBackground","router","homeDefaultLink","hashIdentifier","bind","current_time","start","change","duration","to","currentTime","animateScroll","val","easeInOutQuad","scrollTo","setTimeout","querySelector","this","navHref","includes","replace","addEventListener","event","preventDefault","location","hash","querySelectorAll","navLink","getNavToSectionID","getAttribute","scrollTargetPosition","offsetTop","removeEventListener","excludeSectionID","className","children","Component","Topbar","state","navItems","id","idnm","navheading","href","isOpen","toggleLine","setState","prevState","targetId","map","item","src","Logo","height","alt","target","rel","onClick","style","display","key"],"sourceRoot":""}