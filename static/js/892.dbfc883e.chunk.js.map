{"version":3,"file":"static/js/892.dbfc883e.chunk.js","mappings":"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","sources":["components/Layout/scrollSpy.js","components/Layout/Topbar.js"],"sourcesContent":["import React, { Component } from \"react\";\n\nclass ScrollspyNav extends Component {\n  constructor(props) {\n    super(props);\n\n    this.props = props;\n    this.scrollTargetIds = this.props.scrollTargetIds;\n    this.activeNavClass = this.props.activeNavClass;\n    this.scrollDuration = Number(this.props.scrollDuration) || 1000;\n    this.headerBackground =\n      this.props.headerBackground === \"true\" ? true : false;\n\n    if (this.props.router && this.props.router === \"HashRouter\") {\n      this.homeDefaultLink = \"#/\";\n      this.hashIdentifier = \"#/#\";\n    } else {\n      this.homeDefaultLink = \"/\";\n      this.hashIdentifier = \"#\";\n    }\n    this.scrollSection.bind(this);\n  }\n\n  easeInOutQuad(current_time, start, change, duration) {\n    current_time /= duration / 2;\n    if (current_time < 1)\n      return (change / 2) * current_time * current_time + start;\n    current_time--;\n    return (-change / 2) * (current_time * (current_time - 2) - 1) + start;\n  }\n\n  scrollTo(start, to, duration) {\n    let change = to - start,\n      currentTime = 0,\n      increment = 10;\n\n    let animateScroll = () => {\n      currentTime += increment;\n      let val = this.easeInOutQuad(currentTime, start, change, duration);\n      window.scrollTo(0, val);\n      if (currentTime < duration) {\n        setTimeout(animateScroll, increment);\n      }\n    };\n\n    animateScroll();\n  }\n\n  getNavLinkElement(sectionID) {\n    return document.querySelector(\n      `a[href='${this.hashIdentifier}${sectionID}']`\n    );\n  }\n\n  getNavToSectionID(navHref) {\n    return navHref.includes(this.hashIdentifier)\n      ? navHref.replace(this.hashIdentifier, \"\")\n      : \"\";\n  }\n\n  componentDidMount() {\n    if (document.querySelector(`a[href='${this.homeDefaultLink}']`)) {\n      document\n        .querySelector(`a[href='${this.homeDefaultLink}']`)\n        .addEventListener(\"click\", (event) => {\n          event.preventDefault();\n          this.scrollTo(window.pageYOffset, 0, this.scrollDuration);\n          window.location.hash = \"\";\n        });\n    }\n\n    document\n      .querySelector(\"div[data-nav='list']\")\n      .querySelectorAll(\"a\")\n      .forEach((navLink) => {\n        navLink.addEventListener(\"click\", (event) => {\n          event.preventDefault();\n          let sectionID = this.getNavToSectionID(navLink.getAttribute(\"href\"));\n\n          if (sectionID) {\n            let scrollTargetPosition =\n              document.getElementById(sectionID).offsetTop -\n              (this.headerBackground\n                ? document.querySelector(\"div[data-nav='list']\").scrollHeight\n                : 0);\n            this.scrollTo(\n              window.pageYOffset,\n              scrollTargetPosition,\n              this.scrollDuration\n            );\n          } else {\n            this.scrollTo(window.pageYOffset, 0, this.scrollDuration);\n          }\n        });\n      });\n\n    window.addEventListener(\"scroll\", this.scrollSection, true);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"scroll\", this.scrollSection, true);\n  }\n\n  scrollSection = () => {\n    let scrollSectionOffsetTop;\n    this.scrollTargetIds.map((sectionID, index) => {\n      scrollSectionOffsetTop =\n        document.getElementById(sectionID).offsetTop -\n        (this.headerBackground\n          ? document.querySelector(\"div[data-nav='list']\").scrollHeight\n          : 0);\n\n      if (\n        window.pageYOffset >= scrollSectionOffsetTop &&\n        window.pageYOffset <\n          scrollSectionOffsetTop +\n            document.getElementById(sectionID).scrollHeight\n      ) {\n        this.getNavLinkElement(sectionID).classList.add(this.activeNavClass);\n        this.getNavLinkElement(sectionID).parentNode.classList.add(\n          this.activeNavClass\n        );\n        this.clearOtherNavLinkActiveStyle(sectionID);\n      } else {\n        this.getNavLinkElement(sectionID).classList.remove(this.activeNavClass);\n        this.getNavLinkElement(sectionID).parentNode.classList.remove(\n          this.activeNavClass\n        );\n      }\n\n      if (\n        window.innerHeight + window.pageYOffset >= document.body.scrollHeight &&\n        index === this.scrollTargetIds.length - 1\n      ) {\n        this.getNavLinkElement(sectionID).classList.add(this.activeNavClass);\n        this.getNavLinkElement(sectionID).parentNode.classList.add(\n          this.activeNavClass\n        );\n        this.clearOtherNavLinkActiveStyle(sectionID);\n      }\n    });\n  };\n  clearOtherNavLinkActiveStyle(excludeSectionID) {\n    this.scrollTargetIds.map((sectionID, index) => {\n      if (sectionID !== excludeSectionID) {\n        this.getNavLinkElement(sectionID).classList.remove(this.activeNavClass);\n        this.getNavLinkElement(sectionID).parentNode.classList.remove(\n          this.activeNavClass\n        );\n      }\n    });\n  }\n\n  render() {\n    return (\n      <div data-nav=\"list\" className={this.props.className}>\n        {this.props.children}\n      </div>\n    );\n  }\n}\n\nexport default ScrollspyNav;\n","import React, { Component } from 'react';\r\nimport { Container } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport ScrollspyNav from './scrollSpy';\r\n\r\nimport Logo from '../../assets/images/logo.svg';\r\n\r\nclass Topbar extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      navItems: [\r\n        {\r\n          id: 1,\r\n          idnm: 'about',\r\n          navheading: 'Docs',\r\n          href: 'https://wiki.tonana.org/',\r\n        },\r\n        {\r\n          id: 2,\r\n          idnm: 'events',\r\n          navheading: 'Events',\r\n          href: 'https://wiki.tonana.org/events/we-organize',\r\n        },\r\n        {\r\n          id: 3,\r\n          idnm: 'team',\r\n          navheading: 'Team',\r\n          href: 'https://wiki.tonana.org/tonana-defi-hub/dao/developers',\r\n        },\r\n        {\r\n          id: 4,\r\n          idnm: 'blog',\r\n          navheading: 'Blog',\r\n          href: 'https://twitter.com/tonana_dao',\r\n        },\r\n      ],\r\n      isOpen: false,\r\n    };\r\n    this.toggleLine = this.toggleLine.bind(this);\r\n  }\r\n\r\n  toggleLine() {\r\n    this.setState((prevState) => ({ isOpen: !prevState.isOpen }));\r\n  }\r\n\r\n  render() {\r\n    let targetId = this.state.navItems.map((item) => {\r\n      return item.idnm;\r\n    });\r\n    return (\r\n      <React.Fragment>\r\n        <header id=\"topnav\" className=\"defaultscroll sticky\">\r\n          <Container>\r\n            <Link className=\"logo\" to=\"/\">\r\n              <img src={Logo} height=\"60\" alt=\"\" />\r\n            </Link>\r\n            <div className=\"buy-button\">\r\n              <a\r\n                href=\"https://app.tonana.org\"\r\n                target=\"_blank\"\r\n                rel=\"noopener noreferrer\"\r\n                className=\"btn btn-app btn-pills\"\r\n              >\r\n                Launch app\r\n              </a>\r\n            </div>\r\n            <div className=\"menu-extras\">\r\n              <div className=\"menu-item\">\r\n                <Link\r\n                  to=\"#\"\r\n                  onClick={this.toggleLine}\r\n                  className={\r\n                    this.state.isOpen ? 'navbar-toggle open' : 'navbar-toggle'\r\n                  }\r\n                >\r\n                  <div className=\"lines\">\r\n                    <span></span>\r\n                    <span></span>\r\n                    <span></span>\r\n                  </div>\r\n                </Link>\r\n              </div>\r\n            </div>\r\n            <ScrollspyNav\r\n              scrollTargetIds={targetId}\r\n              scrollDuration=\"800\"\r\n              headerBackground=\"false\"\r\n              activeNavClass=\"active\"\r\n            >\r\n              <div\r\n                id=\"navigation\"\r\n                style={{ display: this.state.isOpen ? 'block' : 'none' }}\r\n              >\r\n                <ul className=\"navigation-menu\">\r\n                  {this.state.navItems.map((item, key) => (\r\n                    <li key={key} className=\"has-submenu\">\r\n                      <a href={item.href}> {item.navheading}</a>\r\n                    </li>\r\n                  ))}\r\n                </ul>\r\n              </div>\r\n            </ScrollspyNav>\r\n          </Container>\r\n        </header>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Topbar;\r\n"],"names":["ScrollspyNav","props","scrollSection","scrollSectionOffsetTop","scrollTargetIds","map","sectionID","index","document","getElementById","offsetTop","headerBackground","querySelector","scrollHeight","window","pageYOffset","getNavLinkElement","classList","add","activeNavClass","parentNode","clearOtherNavLinkActiveStyle","remove","innerHeight","body","length","scrollDuration","Number","router","homeDefaultLink","hashIdentifier","bind","current_time","start","change","duration","to","currentTime","animateScroll","val","easeInOutQuad","scrollTo","setTimeout","this","navHref","includes","replace","addEventListener","event","preventDefault","location","hash","querySelectorAll","forEach","navLink","getNavToSectionID","getAttribute","scrollTargetPosition","removeEventListener","excludeSectionID","className","children","Component","Topbar","state","navItems","id","idnm","navheading","href","isOpen","toggleLine","setState","prevState","targetId","item","src","Logo","height","alt","target","rel","onClick","style","display","key"],"sourceRoot":""}