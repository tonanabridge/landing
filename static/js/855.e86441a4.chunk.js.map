{"version":3,"file":"static/js/855.e86441a4.chunk.js","mappings":"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","sources":["components/Layout/Topbar.js"],"sourcesContent":["import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { withRouter } from 'react-router';\nimport { Container, Modal, ModalBody } from 'reactstrap';\n\n//Import images\nimport logodark from '../../assets/images/tonana.svg';\nimport logolight from '../../assets/images/tonana.svg';\n\nclass Topbar extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isOpen: false,\n      dropdownOpenShop: false,\n      navLinks: [\n        //Note : each child and nested child must have unique id\n        { id: 1, title: 'Home', link: '/' },\n        {\n          id: 2,\n          title: 'About',\n          link: '/',\n          isOpenSubMenu: false,\n        },\n        {\n          id: 3,\n          title: 'Team',\n          link: '/',\n          isOpenSubMenu: false,\n          child: [\n            { title: 'Documentations', link: '/' },\n            { title: 'Changelog', link: '/' },\n            { title: 'Components', link: '/' },\n            { title: 'Widget', link: '/' },\n          ],\n        },\n      ],\n      wishlistModal: false,\n      dropdownIsOpen: false,\n    };\n    this.toggleLine = this.toggleLine.bind(this);\n    this.openBlock.bind(this);\n    this.openNestedBlock.bind(this);\n    this.toggleDropdownShop.bind(this);\n    this.toggleWishlistModal.bind(this);\n    this.toggleDropdownIsOpen.bind(this);\n  }\n\n  toggleWishlistModal = () => {\n    this.setState((prevState) => ({\n      wishlistModal: !prevState.wishlistModal,\n    }));\n  };\n\n  toggleDropdownShop = () => {\n    this.setState({\n      dropdownOpenShop: !this.state.dropdownOpenShop,\n    });\n  };\n  toggleDropdownIsOpen = () => {\n    this.setState({\n      dropdownIsOpen: !this.state.dropdownIsOpen,\n    });\n  };\n\n  toggleLine() {\n    this.setState((prevState) => ({ isOpen: !prevState.isOpen }));\n  }\n\n  componentDidMount() {\n    var matchingMenuItem = null;\n    var ul = document.getElementById('top-menu');\n    var items = ul.getElementsByTagName('a');\n    for (var i = 0; i < items.length; ++i) {\n      if (this.props.location.pathname === items[i].pathname) {\n        matchingMenuItem = items[i];\n        break;\n      }\n    }\n    if (matchingMenuItem) {\n      this.activateParentDropdown(matchingMenuItem);\n    }\n  }\n\n  activateParentDropdown = (item) => {\n    const parent = item.parentElement;\n    if (parent) {\n      parent.classList.add('active'); // li\n      const parent1 = parent.parentElement;\n      parent1.classList.add('active'); // li\n      if (parent1) {\n        const parent2 = parent1.parentElement;\n        parent2.classList.add('active'); // li\n        if (parent2) {\n          const parent3 = parent2.parentElement;\n          parent3.classList.add('active'); // li\n          if (parent3) {\n            const parent4 = parent3.parentElement;\n            parent4.classList.add('active'); // li\n          }\n        }\n      }\n    }\n  };\n\n  openBlock = (level2_id) => {\n    var tmpLinks = this.state.navLinks;\n    tmpLinks.map((tmpLink) =>\n      //Match level 2 id\n      tmpLink.id === level2_id\n        ? (tmpLink.isOpenSubMenu = !tmpLink.isOpenSubMenu)\n        : false,\n    );\n    this.setState({ navLinks: tmpLinks });\n  };\n\n  openNestedBlock = (level2_id, level3_id) => {\n    var tmpLinks = this.state.navLinks;\n    tmpLinks.map((tmpLink) =>\n      //Match level 2 id\n      tmpLink.id === level2_id\n        ? tmpLink.child.map((tmpchild) =>\n            //if level1 id is matched then match level 3 id\n            tmpchild.id === level3_id\n              ? //if id is matched then update status(level 3 sub menu will be open)\n                (tmpchild.isOpenNestedSubMenu = !tmpchild.isOpenNestedSubMenu)\n              : (tmpchild.isOpenNestedSubMenu = false),\n          )\n        : false,\n    );\n    this.setState({ navLinks: tmpLinks });\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        {this.props.tagline ? this.props.tagline : null}\n\n        <header id=\"topnav\" className=\"defaultscroll sticky\">\n          <Container>\n            <div>\n              {this.props.hasDarkTopBar ? (\n                <a className=\"logo\" href=\"index.html\">\n                  <img\n                    src={logodark}\n                    height=\"24\"\n                    className=\"logo-light-mode\"\n                    alt=\"\"\n                  />\n                  <img\n                    src={logolight}\n                    height=\"24\"\n                    className=\"logo-dark-mode\"\n                    alt=\"\"\n                  />\n                </a>\n              ) : (\n                <a className=\"logo\" href=\"index.html\">\n                  <span className=\"logo-light-mode\">\n                    <img src={logodark} className=\"l-dark\" height=\"24\" alt=\"\" />\n                    <img\n                      src={logolight}\n                      className=\"l-light\"\n                      height=\"24\"\n                      alt=\"\"\n                    />\n                  </span>\n                  <img\n                    src={logolight}\n                    height=\"24\"\n                    className=\"logo-dark-mode\"\n                    alt=\"\"\n                  />\n                </a>\n              )}\n            </div>\n\n            <div className=\"buy-button\">\n              <Link\n                to=\"https://app.tonana.org\"\n                target=\"_blank\"\n                id=\"buyButton\"\n                className=\"btn btn-warning btn-pills\"\n              >\n                Launch App\n              </Link>\n            </div>\n\n            <div className=\"menu-extras\">\n              <div className=\"menu-item\">\n                <Link\n                  to=\"#\"\n                  onClick={this.toggleLine}\n                  className={\n                    this.state.isOpen ? 'navbar-toggle open' : 'navbar-toggle'\n                  }\n                >\n                  <div className=\"lines\">\n                    <span></span>\n                    <span></span>\n                    <span></span>\n                  </div>\n                </Link>\n              </div>\n            </div>\n\n            <div\n              id=\"navigation\"\n              style={{ display: this.state.isOpen ? 'block' : 'none' }}\n            >\n              <ul className=\"navigation-menu\" id=\"top-menu\">\n                {this.state.navLinks.map((navLink, key) =>\n                  navLink.child ? (\n                    <li className=\"has-submenu\" key={key}>\n                      {/* child item(menu Item) - Level 1 */}\n                      <Link\n                        to={navLink.link}\n                        onClick={(event) => {\n                          event.preventDefault();\n                          this.openBlock(navLink.id);\n                        }}\n                      >\n                        {navLink.title}\n                      </Link>\n                      {/* <i className=\"mdi mdi-chevron-right me-1\"></i> */}\n                      <span className=\"menu-arrow\"></span>\n                      {navLink.isMegaMenu ? (\n                        // if menu is mega menu(2 columns grid)\n                        <ul\n                          className={\n                            navLink.isOpenSubMenu\n                              ? 'submenu megamenu open'\n                              : 'submenu megamenu'\n                          }\n                        >\n                          <li>\n                            <ul>\n                              {navLink.child.map((item, childKey) =>\n                                item.id < 12 ? (\n                                  <li key={childKey}>\n                                    <Link to={item.link}>{item.title}</Link>\n                                  </li>\n                                ) : null,\n                              )}\n                            </ul>\n                          </li>\n                          <li>\n                            <ul>\n                              {navLink.child.map((item, childKey) =>\n                                item.id < 23 && item.id > 11 ? (\n                                  <li key={childKey}>\n                                    <Link to={item.link}>\n                                      {item.title}\n                                      {item.isNew ? (\n                                        <span className=\"badge bg-danger rounded ms-2\">\n                                          new\n                                        </span>\n                                      ) : null}\n                                    </Link>\n                                  </li>\n                                ) : null,\n                              )}\n                            </ul>\n                          </li>\n                          <li>\n                            <ul>\n                              {navLink.child.map((item, childKey) =>\n                                item.id < 34 && item.id > 22 ? (\n                                  <li key={childKey}>\n                                    <Link to={item.link}>\n                                      {item.title}\n                                      {item.isNew ? (\n                                        <span className=\"badge bg-danger\">\n                                          new\n                                        </span>\n                                      ) : null}\n                                      {item.isOnePage ? (\n                                        <span className=\"badge bg-warning rounded ms-2\">\n                                          Onepage\n                                        </span>\n                                      ) : null}\n                                      {item.isupdatePage ? (\n                                        <span className=\"badge badge-pill bg-info\">\n                                          Updated\n                                        </span>\n                                      ) : null}\n                                    </Link>\n                                  </li>\n                                ) : null,\n                              )}\n                            </ul>\n                          </li>\n                          <li>\n                            <ul>\n                              {navLink.child.map((item, childKey) =>\n                                item.id < 45 && item.id > 33 ? (\n                                  <li key={childKey}>\n                                    <Link to={item.link}>\n                                      {item.title}\n\n                                      {item.isOnePage ? (\n                                        <span className=\"badge bg-warning rounded ms-2\">\n                                          Onepage\n                                        </span>\n                                      ) : null}\n                                      {item.isupdatePage ? (\n                                        <span className=\"badge badge-pill bg-info\">\n                                          Updated\n                                        </span>\n                                      ) : null}\n                                    </Link>\n                                  </li>\n                                ) : null,\n                              )}\n                            </ul>\n                          </li>\n                          <li>\n                            <ul>\n                              {navLink.child.map((item, childKey) =>\n                                item.id < 56 && item.id > 44 ? (\n                                  <li key={childKey}>\n                                    <Link to={item.link}>\n                                      {item.title}\n\n                                      {item.isOnePage ? (\n                                        <span className=\"badge bg-warning rounded ms-2\">\n                                          Onepage\n                                        </span>\n                                      ) : null}\n                                      {item.isupdatePage ? (\n                                        <span className=\"badge badge-pill bg-info\">\n                                          Updated\n                                        </span>\n                                      ) : null}\n                                    </Link>\n                                  </li>\n                                ) : null,\n                              )}\n                            </ul>\n                          </li>\n                        </ul>\n                      ) : (\n                        // if menu is not mega menu(1grid)\n                        <ul\n                          className={\n                            navLink.isOpenSubMenu ? 'submenu open' : 'submenu'\n                          }\n                        >\n                          {navLink.child.map((childArray, childKey) =>\n                            childArray.nestedChild ? (\n                              // sub menu item - Level 2\n                              <li className=\"has-submenu\" key={childKey}>\n                                <Link\n                                  to={childArray.link}\n                                  onClick={(event) => {\n                                    event.preventDefault();\n                                    this.openNestedBlock(\n                                      navLink.id,\n                                      childArray.id,\n                                    );\n                                  }}\n                                >\n                                  {childArray.title}{' '}\n                                  {childArray.isNew ? (\n                                    <span className=\"badge badge-pill badge-warning\">\n                                      Added\n                                    </span>\n                                  ) : null}\n                                </Link>\n                                <span className=\"submenu-arrow\"></span>\n                                <ul\n                                  className={\n                                    childArray.isOpenNestedSubMenu\n                                      ? 'submenu open'\n                                      : 'submenu'\n                                  }\n                                >\n                                  {childArray.nestedChild.map(\n                                    (nestedChildArray, nestedKey) => (\n                                      // nested sub menu item - Level 3\n                                      <li key={nestedKey}>\n                                        <Link to={nestedChildArray.link}>\n                                          {nestedChildArray.title}{' '}\n                                          {nestedChildArray.isNewPage ? (\n                                            <span className=\"badge badge-danger rounded\">\n                                              NEW\n                                            </span>\n                                          ) : null}\n                                          {nestedChildArray.isupdatePage ? (\n                                            <span className=\"badge badge-pill badge-info\">\n                                              Updated\n                                            </span>\n                                          ) : null}\n                                        </Link>\n                                      </li>\n                                    ),\n                                  )}\n                                </ul>\n                              </li>\n                            ) : (\n                              <li key={childKey}>\n                                <Link to={childArray.link}>\n                                  {childArray.title}\n                                </Link>\n                              </li>\n                            ),\n                          )}\n                        </ul>\n                      )}\n                    </li>\n                  ) : (\n                    <li key={key}>\n                      <Link to={navLink.link}>{navLink.title}</Link>\n                    </li>\n                  ),\n                )}\n              </ul>\n              <div className=\"buy-menu-btn d-none\">\n                <Link\n                  to=\"https://app.tonana.org\"\n                  target=\"_blank\"\n                  id=\"buyButton\"\n                  className=\"btn btn-warning pills\"\n                >\n                  Launch App\n                </Link>\n              </div>\n            </div>\n          </Container>\n        </header>\n\n        <Modal\n          isOpen={this.state.wishlistModal}\n          tabIndex=\"-1\"\n          centered\n          contentClassName=\"rounded shadow-lg border-0 overflow-hidden\"\n          toggle={this.toggleWishlistModal}\n        >\n          <ModalBody className=\"py-5\">\n            <div className=\"text-center\">\n              <div\n                className=\"icon d-flex align-items-center justify-content-center bg-soft-danger rounded-circle mx-auto\"\n                style={{ height: '95px', width: '95px' }}\n              >\n                <h1 className=\"mb-0\">\n                  <i className=\"uil uil-heart-break align-middle\"></i>\n                </h1>\n              </div>\n              <div className=\"mt-4\">\n                <h4>Your wishlist is empty.</h4>\n                <p className=\"text-muted\">\n                  Create your first wishlist request...\n                </p>\n                <div className=\"mt-4\">\n                  <Link to=\"#\" className=\"btn btn-outline-warning pills\">\n                    + Create new wishlist\n                  </Link>\n                </div>\n              </div>\n            </div>\n          </ModalBody>\n        </Modal>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default withRouter(Topbar);\n"],"names":["Topbar","props","toggleWishlistModal","setState","prevState","wishlistModal","toggleDropdownShop","dropdownOpenShop","state","toggleDropdownIsOpen","dropdownIsOpen","activateParentDropdown","item","parent","parentElement","classList","add","parent1","parent2","parent3","openBlock","level2_id","tmpLinks","navLinks","map","tmpLink","id","isOpenSubMenu","openNestedBlock","level3_id","child","tmpchild","isOpenNestedSubMenu","isOpen","title","link","toggleLine","bind","this","matchingMenuItem","items","document","getElementById","getElementsByTagName","i","length","location","pathname","tagline","className","hasDarkTopBar","href","src","logodark","height","alt","logolight","to","target","onClick","style","display","navLink","key","event","preventDefault","isMegaMenu","childKey","isNew","isOnePage","isupdatePage","childArray","nestedChild","nestedChildArray","nestedKey","isNewPage","tabIndex","centered","contentClassName","toggle","width","Component","withRouter"],"sourceRoot":""}